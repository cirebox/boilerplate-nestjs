name: CI Pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Executa semanalmente no domingo à meia-noite

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      
      # Executa scan nas dependências com npm audit
      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Generate code coverage report
        run: npm run test:cov

      # Executa Snyk para verificar vulnerabilidades nas dependências
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      # Executa SonarCloud para análise estática de código
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    

      # Digitaliza código-fonte para segredos expostos
      - name: Detect secrets in code
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

      # Análise de dependências com OWASP Dependency-Check
      - name: OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'NestJS-Microservice-Boilerplate'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --suppression suppression.xml
            --failOnCVSS 7
            --enableRetired
        
      # Salva os relatórios como artefatos
      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-reports
          path: |
            reports/
            snyk-result.json

      - name: Generate Prisma docs
        run: npx prisma generate
        env:
          DATABASE_URL: 'file:./dev.db'

      - name: Upload ERD artifacts
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: prisma-docs
          path: |
            ERD.md
            ERD.svg

  terraform-validate:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.7.0'

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend=false
      
      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate -no-color

      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Security Scan
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: ./terraform
        continue-on-error: true

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: ${{ secrets.DOCKERHUB_USERNAME != '' }}

      - name: Build and export
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: nestjs-boilerplate:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test container
        run: |
          docker run --rm nestjs-boilerplate:latest npm run test
          
      - name: Build and push production image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.prod
          push: ${{ secrets.DOCKERHUB_USERNAME != '' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/nestjs-boilerplate:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
        if: ${{ secrets.DOCKERHUB_USERNAME != '' }}
        
      - name: Save Docker image as artifact
        if: github.ref == 'refs/heads/main'
        run: |
          docker save nestjs-boilerplate:latest > nestjs-image.tar
          
      - name: Upload Docker image artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: nestjs-image.tar
          retention-days: 1
