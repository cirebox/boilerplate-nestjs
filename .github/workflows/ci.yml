name: CI Pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Executa semanalmente no domingo à meia-noite

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # Cache para node_modules
      - name: Cache node modules
        uses: actions/cache@v3
        id: cache-nodemodules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      # Cache para o Prisma client gerado
      - name: Cache Prisma
        uses: actions/cache@v3
        id: cache-prisma
        with:
          path: |
            node_modules/.prisma
            node_modules/@prisma/client
          key: ${{ runner.os }}-prisma-${{ hashFiles('**/prisma/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      # Cache para cobertura de testes
      - name: Cache Jest
        uses: actions/cache@v3
        with:
          path: |
            coverage
            .jest-cache
          key: ${{ runner.os }}-jest-${{ hashFiles('**/jest.config.ts') }}-${{ hashFiles('**/*.ts') }}
          restore-keys: |
            ${{ runner.os }}-jest-
            
      # Cache para ESLint
      - name: Cache ESLint
        uses: actions/cache@v3
        with:
          path: .eslintcache
          key: ${{ runner.os }}-eslint-${{ hashFiles('**/eslint.config.mjs') }}-${{ hashFiles('**/*.ts') }}
          restore-keys: |
            ${{ runner.os }}-eslint-
            
      # Cache para TypeScript
      - name: Cache TypeScript
        uses: actions/cache@v3
        with:
          path: .tsbuildinfo
          key: ${{ runner.os }}-tsbuildinfo-${{ hashFiles('**/tsconfig.json') }}-${{ hashFiles('**/*.ts') }}
          restore-keys: |
            ${{ runner.os }}-tsbuildinfo-

      - name: Install dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci
        
      # Executa scan nas dependências com npm audit
      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Generate code coverage report
        run: npm run test:cov

      # Executa Snyk para verificar vulnerabilidades nas dependências
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      # Executa SonarCloud para análise estática de código
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    

      # Digitaliza código-fonte para segredos expostos
      - name: Detect secrets in code
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

      # Análise de dependências com OWASP Dependency-Check
      - name: OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'NestJS-Microservice-Boilerplate'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --suppression suppression.xml
            --failOnCVSS 7
            --enableRetired
        
      # Salva os relatórios como artefatos
      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-reports
          path: |
            reports/
            snyk-result.json

      - name: Generate Prisma docs
        run: npx prisma generate
        env:
          DATABASE_URL: 'file:./dev.db'

      - name: Upload ERD artifacts
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: prisma-docs
          path: |
            ERD.md
            ERD.svg

  terraform-validate:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.7.0'
      
      # Cache para arquivos do Terraform
      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: |
            terraform/.terraform
            ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/terraform/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Configure Terraform plugin cache
        run: |
          mkdir -p ~/.terraform.d/plugin-cache
          echo 'plugin_cache_dir = "$HOME/.terraform.d/plugin-cache"' > ~/.terraformrc

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend=false
      
      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate -no-color

      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Security Scan
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: ./terraform
        continue-on-error: true

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: ${{ secrets.DOCKERHUB_USERNAME != '' }}

      - name: Build and export
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: nestjs-boilerplate:latest
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          outputs: type=docker,dest=/tmp/image.tar

      - name: Test container
        run: |
          docker run --rm nestjs-boilerplate:latest npm run test
          
      - name: Build and push production image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.prod
          push: ${{ secrets.DOCKERHUB_USERNAME != '' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/nestjs-boilerplate:latest
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
        if: ${{ secrets.DOCKERHUB_USERNAME != '' }}
        
      - name: Save Docker image as artifact
        if: github.ref == 'refs/heads/main'
        run: |
          docker save nestjs-boilerplate:latest > nestjs-image.tar
          
      - name: Upload Docker image artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: nestjs-image.tar
          retention-days: 1
